package com.teoware.refapp.dao;

import static com.teoware.refapp.dao.metadata.Schema.REFAPP_SCHEMA_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.DESCRIPTION_COLUMN_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.ID_COLUMN_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.STATUS_COLUMN_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.TASKS_TABLE_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.TASKS_VIEW_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.TASK_DETAILS_TABLE_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.TASK_ID_COLUMN_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.TASK_STATUS_TABLE_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.USER_ID_COLUMN_NAME;
import static com.teoware.refapp.dao.metadata.TaskTables.UUID_COLUMN_NAME;

import java.util.List;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.teoware.refapp.dao.dto.CreateTaskDetailsInput;
import com.teoware.refapp.dao.dto.CreateTaskDetailsOutput;
import com.teoware.refapp.dao.dto.CreateTaskInput;
import com.teoware.refapp.dao.dto.CreateTaskOutput;
import com.teoware.refapp.dao.dto.DeleteTaskDetailsInput;
import com.teoware.refapp.dao.dto.DeleteTaskDetailsOutput;
import com.teoware.refapp.dao.dto.DeleteTaskInput;
import com.teoware.refapp.dao.dto.DeleteTaskOutput;
import com.teoware.refapp.dao.dto.DeleteTaskStatusInput;
import com.teoware.refapp.dao.dto.DeleteTaskStatusOutput;
import com.teoware.refapp.dao.dto.ReadTaskInput;
import com.teoware.refapp.dao.dto.ReadTaskOutput;
import com.teoware.refapp.dao.dto.ReadTasksInput;
import com.teoware.refapp.dao.dto.UpdateTaskDetailsInput;
import com.teoware.refapp.dao.dto.UpdateTaskDetailsOutput;
import com.teoware.refapp.dao.dto.UpdateTaskInput;
import com.teoware.refapp.dao.dto.UpdateTaskOutput;
import com.teoware.refapp.dao.dto.UpdateTaskStatusInput;
import com.teoware.refapp.dao.dto.UpdateTaskStatusOutput;
import com.teoware.refapp.dao.metadata.JNDI;
import com.teoware.refapp.dao.rowmapper.IdRowMapper;
import com.teoware.refapp.dao.rowmapper.TaskRowMapper;
import com.teoware.refapp.dao.util.ChangeResult;
import com.teoware.refapp.dao.util.DaoHelper;
import com.teoware.refapp.dao.util.SQL;
import com.teoware.refapp.model.common.Id;
import com.teoware.refapp.model.common.Uuid;
import com.teoware.refapp.model.task.Task;

@Stateless
@TransactionAttribute(TransactionAttributeType.MANDATORY)
public class TaskDaoBean extends Dao implements TaskDao {

	private static final long serialVersionUID = 1L;

	private static final Logger LOG = LoggerFactory.getLogger(TaskDaoBean.class);

	private static final String DAO_NAME = "Task DAO";

	public static final String TASKS_VIEW = REFAPP_SCHEMA_NAME + "." + TASKS_VIEW_NAME;
	public static final String TASKS_TABLE = REFAPP_SCHEMA_NAME + "." + TASKS_TABLE_NAME;
	public static final String TASK_STATUS_TABLE = REFAPP_SCHEMA_NAME + "." + TASK_STATUS_TABLE_NAME;
	public static final String TASK_DETAILS_TABLE = REFAPP_SCHEMA_NAME + "." + TASK_DETAILS_TABLE_NAME;

	@Resource(mappedName = JNDI.REFAPP_DATASOURCE)
	private DataSource dataSource;

	private IdRowMapper idRowMapper = new IdRowMapper();
	private TaskRowMapper taskRowMapper = new TaskRowMapper();

	@PostConstruct
	private void initialize() {
		super.initialize(dataSource);
	}

	@Override
	public CreateTaskOutput createTask(CreateTaskInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Create task operation invoked.");

		SQL sql = new SQL.Builder().doInsert(TASKS_TABLE).columnValues(USER_ID_COLUMN_NAME, UUID_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(input.getUserId(), input.getUuid());
		ChangeResult changeResult = super.create(sql, parameters);
		int rowsAffected = changeResult.getRowsAffected();
		Id taskId = changeResult.getAutoGeneratedKey();
		return new CreateTaskOutput(taskId, rowsAffected);
	}

	@Override
	public CreateTaskDetailsOutput createTaskDetails(CreateTaskDetailsInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Create task details operation invoked.");

		SQL sql = new SQL.Builder().doInsert(TASK_DETAILS_TABLE)
				.columnValues(TASK_ID_COLUMN_NAME, DESCRIPTION_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(input.getId(), input.getTaskDetails().getDescription());
		ChangeResult changeResult = super.create(sql, parameters);
		return new CreateTaskDetailsOutput(changeResult.getRowsAffected());
	}

	@Override
	public Id readTaskId(Uuid uuid) throws DaoException {
		LOG.info(DAO_NAME + ": Read task ID operation invoked.");

		SQL sql = new SQL.Builder().doSelect(ID_COLUMN_NAME).from(TASKS_TABLE).where(UUID_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(uuid);
		return super.read(sql, idRowMapper, parameters).get(0);
	}

	@Override
	public ReadTaskOutput readTask(ReadTaskInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Read task operation invoked.");

		SQL sql = new SQL.Builder().doSelectAll().from(TASKS_VIEW).where(UUID_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(input.getUuid());
		List<Task> taskList = super.read(sql, taskRowMapper, parameters);
		return new ReadTaskOutput(taskList);
	}

	@Override
	public ReadTaskOutput readTasks(ReadTasksInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Read tasks operation invoked.");

		SQL sql = new SQL.Builder().doSelectAll().from(TASKS_VIEW).where(USER_ID_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(input.getUserId());
		List<Task> taskList = super.read(sql, taskRowMapper, parameters);
		return new ReadTaskOutput(taskList);
	}

	@Override
	public UpdateTaskOutput updateTask(UpdateTaskInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Update task operation invoked.");

		if (input.getUuid() != null) {
			SQL sql = new SQL.Builder().doUpdate(TASKS_TABLE).setColumn(UUID_COLUMN_NAME).where(ID_COLUMN_NAME).build();
			Object[] parameters = DaoHelper.generateArray(input.getUuid(), input.getId());
			ChangeResult changeResult = super.update(sql, parameters);
			return new UpdateTaskOutput(changeResult.getRowsAffected());
		} else {
			return new UpdateTaskOutput(0);
		}
	}

	@Override
	public UpdateTaskDetailsOutput updateTaskDetails(UpdateTaskDetailsInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Update task details operation invoked.");

		if (input.getTaskDetails() != null) {
			SQL sql = new SQL.Builder().doUpdate(TASK_DETAILS_TABLE).setColumn(DESCRIPTION_COLUMN_NAME)
					.where(ID_COLUMN_NAME).build();
			Object[] parameters = DaoHelper.generateArray(input.getTaskDetails().getDescription(), input.getId());
			ChangeResult changeResult = super.update(sql, parameters);
			return new UpdateTaskDetailsOutput(changeResult.getRowsAffected());
		} else {
			return new UpdateTaskDetailsOutput(0);
		}
	}

	@Override
	public UpdateTaskStatusOutput updateTaskStatus(UpdateTaskStatusInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Update task status operation invoked.");

		if (input.getTaskStatus() != null) {
			SQL sql = new SQL.Builder().doUpdate(TASK_STATUS_TABLE).setColumn(STATUS_COLUMN_NAME).where(ID_COLUMN_NAME)
					.build();
			Object[] parameters = DaoHelper.generateArray(input.getTaskStatus().getStatus(), input.getId());
			ChangeResult changeResult = super.update(sql, parameters);
			return new UpdateTaskStatusOutput(changeResult.getRowsAffected());
		} else {
			return new UpdateTaskStatusOutput(0);
		}
	}

	@Override
	public DeleteTaskOutput deleteTask(DeleteTaskInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Delete task operation invoked.");

		SQL sql = new SQL.Builder().doDelete(TASKS_TABLE).where(ID_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(input.getId());
		ChangeResult changeResult = super.delete(sql, parameters);
		return new DeleteTaskOutput(changeResult.getRowsAffected());
	}

	@Override
	public DeleteTaskDetailsOutput deleteTaskDetails(DeleteTaskDetailsInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Delete task details operation invoked.");

		SQL sql = new SQL.Builder().doDelete(TASK_DETAILS_TABLE).where(ID_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(input.getId());
		ChangeResult changeResult = super.delete(sql, parameters);
		return new DeleteTaskDetailsOutput(changeResult.getRowsAffected());
	}

	@Override
	public DeleteTaskStatusOutput deleteTaskStatus(DeleteTaskStatusInput input) throws DaoException {
		LOG.info(DAO_NAME + ": Delete task status operation invoked.");

		SQL sql = new SQL.Builder().doDelete(TASK_STATUS_TABLE).where(ID_COLUMN_NAME).build();
		Object[] parameters = DaoHelper.generateArray(input.getId());
		ChangeResult changeResult = super.delete(sql, parameters);
		return new DeleteTaskStatusOutput(changeResult.getRowsAffected());
	}

	@Override
	public void persistConnection() {
		super.setPersistConnection(Boolean.TRUE);
	}

	@Override
	public void terminateConnection() {
		super.setPersistConnection(Boolean.FALSE);
		super.closeConnection();
	}
}
